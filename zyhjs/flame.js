document.write(" <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" \/>");
document.write("");
document.write("    <style>");
document.write("      * {");
document.write("        box-sizing: border-box;");
document.write("      }");
document.write("");
document.write("      html,");
document.write("      body {");
document.write("        height: 100%;");
document.write("      }");
document.write("");
document.write("      body {");
document.write("        overflow: hidden;");
document.write("        display: grid;");
document.write("        color: white;");
document.write("        background: black;");
document.write("      }");
document.write("    <\/style>");
document.write("  <\/head>");
document.write("  <body>");
document.write("    <pointer-particles><\/pointer-particles>");
document.write("");
document.write("    <script>");
document.write("      class PointerParticle {");
document.write("        constructor(spread, speed, component) {");
document.write("          const { ctx, pointer, hue } = component;");
document.write("");
document.write("          this.ctx = ctx;");
document.write("          this.x = pointer.x;");
document.write("          this.y = pointer.y;");
document.write("          this.mx = pointer.mx * 0.1;");
document.write("          this.my = pointer.my * 0.1;");
document.write("          this.size = Math.random() + 1;");
document.write("          this.decay = 0.01;");
document.write("          this.speed = speed * 0.08;");
document.write("          this.spread = spread * this.speed;");
document.write("          this.spreadX = (Math.random() - 0.5) * this.spread - this.mx;");
document.write("          this.spreadY = (Math.random() - 0.5) * this.spread - this.my;");
document.write("          this.color = `hsl(${hue}deg 90% 60%)`;");
document.write("        }");
document.write("");
document.write("        draw() {");
document.write("          this.ctx.fillStyle = this.color;");
document.write("          this.ctx.beginPath();");
document.write("          this.ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);");
document.write("          this.ctx.fill();");
document.write("        }");
document.write("");
document.write("        collapse() {");
document.write("          this.size -= this.decay;");
document.write("        }");
document.write("");
document.write("        trail() {");
document.write("          this.x += this.spreadX * this.size;");
document.write("          this.y += this.spreadY * this.size;");
document.write("        }");
document.write("");
document.write("        update() {");
document.write("          this.draw();");
document.write("          this.trail();");
document.write("          this.collapse();");
document.write("        }");
document.write("      }");
document.write("");
document.write("      class PointerParticles extends HTMLElement {");
document.write("        static register(tag = 'pointer-particles') {");
document.write("          if ('customElements' in window) {");
document.write("            customElements.define(tag, this);");
document.write("          }");
document.write("        }");
document.write("");
document.write("        static css = `");
document.write("    :host {");
document.write("      display: grid;");
document.write("      width: 100%;");
document.write("      height: 100%;");
document.write("      pointer-events: none;");
document.write("    }");
document.write("  `;");
document.write("");
document.write("        constructor() {");
document.write("          super();");
document.write("");
document.write("          this.canvas;");
document.write("          this.ctx;");
document.write("          this.fps = 60;");
document.write("          this.msPerFrame = 1000 \/ this.fps;");
document.write("          this.timePrevious;");
document.write("          this.particles = [];");
document.write("          this.pointer = {");
document.write("            x: 0,");
document.write("            y: 0,");
document.write("            mx: 0,");
document.write("            my: 0,");
document.write("          };");
document.write("          this.hue = 0;");
document.write("        }");
document.write("");
document.write("        connectedCallback() {");
document.write("          const canvas = document.createElement('canvas');");
document.write("          const sheet = new CSSStyleSheet();");
document.write("");
document.write("          this.shadowroot = this.attachShadow({ mode: 'open' });");
document.write("");
document.write("          sheet.replaceSync(PointerParticles.css);");
document.write("          this.shadowroot.adoptedStyleSheets = [sheet];");
document.write("");
document.write("          this.shadowroot.append(canvas);");
document.write("");
document.write("          this.canvas = this.shadowroot.querySelector('canvas');");
document.write("          this.ctx = this.canvas.getContext('2d');");
document.write("          this.setCanvasDimensions();");
document.write("          this.setupEvents();");
document.write("          this.timePrevious = performance.now();");
document.write("          this.animateParticles();");
document.write("        }");
document.write("");
document.write("        createParticles(event, { count, speed, spread }) {");
document.write("          this.setPointerValues(event);");
document.write("");
document.write("          for (let i = 0; i < count; i++) {");
document.write("            this.particles.push(new PointerParticle(spread, speed, this));");
document.write("          }");
document.write("        }");
document.write("");
document.write("        setPointerValues(event) {");
document.write("          this.pointer.x = event.x - this.offsetLeft;");
document.write("          this.pointer.y = event.y - this.offsetTop;");
document.write("          this.pointer.mx = event.movementX;");
document.write("          this.pointer.my = event.movementY;");
document.write("        }");
document.write("");
document.write("        setupEvents() {");
document.write("          const parent = this.parentNode;");
document.write("");
document.write("          parent.addEventListener('click', (event) => {");
document.write("            this.createParticles(event, {");
document.write("              count: 300,");
document.write("              speed: Math.random() + 1,");
document.write("              spread: Math.random() + 50,");
document.write("            });");
document.write("          });");
document.write("");
document.write("          parent.addEventListener('pointermove', (event) => {");
document.write("            this.createParticles(event, {");
document.write("              count: 20,");
document.write("              speed: this.getPointerVelocity(event),");
document.write("              spread: 1,");
document.write("            });");
document.write("          });");
document.write("");
document.write("          window.addEventListener('resize', () => this.setCanvasDimensions());");
document.write("        }");
document.write("");
document.write("        getPointerVelocity(event) {");
document.write("          const a = event.movementX;");
document.write("          const b = event.movementY;");
document.write("          const c = Math.floor(Math.sqrt(a * a + b * b));");
document.write("");
document.write("          return c;");
document.write("        }");
document.write("");
document.write("        handleParticles() {");
document.write("          for (let i = 0; i < this.particles.length; i++) {");
document.write("            this.particles[i].update();");
document.write("");
document.write("            if (this.particles[i].size <= 0.1) {");
document.write("              this.particles.splice(i, 1);");
document.write("              i--;");
document.write("            }");
document.write("          }");
document.write("        }");
document.write("");
document.write("        setCanvasDimensions() {");
document.write("          const rect = this.parentNode.getBoundingClientRect();");
document.write("");
document.write("          this.canvas.width = rect.width;");
document.write("          this.canvas.height = rect.height;");
document.write("        }");
document.write("");
document.write("        animateParticles() {");
document.write("          requestAnimationFrame(() => this.animateParticles());");
document.write("");
document.write("          const timeNow = performance.now();");
document.write("          const timePassed = timeNow - this.timePrevious;");
document.write("");
document.write("          if (timePassed < this.msPerFrame) return;");
document.write("");
document.write("          const excessTime = timePassed % this.msPerFrame;");
document.write("");
document.write("          this.timePrevious = timeNow - excessTime;");
document.write("");
document.write("          this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);");
document.write("          this.hue = this.hue > 360 ? 0 : (this.hue += 3);");
document.write("");
document.write("          this.handleParticles();");
document.write("        }");
document.write("      }");
document.write("");
document.write("      PointerParticles.register();");
document.write("    <\/script>");
document.write("  <\/body>");
document.write("<html>");
